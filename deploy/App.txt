<!DOCTYPE html>
<html>
<head>
    <title>Portfolio Task Burn Up/Down</title>
    <!--  (c) 2017 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Fri Oct 06 2017 11:27:31 GMT-0600 (MDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Fri Oct 06 2017 11:27:31 GMT-0600 (MDT)";
        var STORY    = "";
        var BUILDER  = "johty01";
        var CHECKSUM = 29434402895;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>
    <!-- our highcharts (needed so that we can add patterns) 
    <script type="text/javascript" src="/apps/2.1/lib/analytics/analytics-all.js"></script>
    -->
    
    
    <script type="text/javascript">
        Rally.onReady(function() {
             
(function () {
    var Ext = window.Ext4 || window.Ext;

    Ext.define("Rally.apps.charts.DateMixin", {

        dateFormattersHighcharts: [
            {key: "MMM", value: "%b"},
            {key: "MM", value: "%m"},
            {key: "dd", value: "%d"},
            {key: "yyyy", value: "%Y"}
        ],

        dateFormatters: [
            {key: "MMM", value: "M"},
            {key: "MM", value: "m"},
            {key: "dd", value: "d"},
            {key: "yyyy", value: "Y"}
        ],

        
        dateToStringDisplay: function (date) {
            return Ext.Date.format(date, 'm/d/Y');
        },

        dateToString: function (date) {
            return Ext.Date.format(date, 'Y-m-d\\TH:i:s.u\\Z');
        },

        dateStringToObject: function (dateStr) {
            var finalIndex = dateStr.indexOf('T'),
                dateObj;

            if (finalIndex > -1) {
                dateStr = dateStr.slice(0, dateStr.indexOf('T'));
            }

            dateObj = this._splitDateParts(dateStr);

            return new Date(dateObj.year, dateObj.month, dateObj.day);
        },

        _splitDateParts: function (dateStr) {
            if (this._shouldSplitOnDash(dateStr)) {
                return this._objectFromYearFirstDate(dateStr.split('-'));
            }
            else {
                return this._objectFromMonthFirstDate(dateStr.split('/'));
            }
        },

        _objectFromYearFirstDate: function (dateArray) {
            if (dateArray.length !== 3) {
                return { year: 0, month: 0, day: 0 };
            }

            dateArray[1] = (parseInt(dateArray[1], 10) - 1).toString();

            return {
                year: dateArray[0],
                month: dateArray[1],
                day: dateArray[2]
            };
        },

        _objectFromMonthFirstDate: function (dateArray) {
            if (dateArray.length !== 3) {
                return { year: 0, month: 0, day: 0 };
            }

            dateArray[0] = (parseInt(dateArray[0], 10) - 1).toString();

            return {
                month: dateArray[0],
                day: dateArray[1],
                year: dateArray[2]
            };
        },

        _shouldSplitOnDash: function (dateStr) {
            return dateStr.split('-').length === 3;
        }

    });

}());
(function () {
    var Ext = window.Ext4 || window.Ext;

    Ext.define("Rally.apps.charts.settings.SettingsChangeMixin", {

        sendSettingsChange: function(artifact) {
            console.log("changed:", artifact);
            if (this.settingsParent) {
                this.settingsParent.sendSettingsChange(artifact, this);
            }
        },

        receiveSettingsChange: function(artifact) {

        }

    });
}());
(function() {
    var Ext = window.Ext4 || window.Ext;

    Ext.define("Rally.apps.charts.settings.RadioGroupSetting", {
        extend: "Ext.form.FieldContainer",

        config: {
            settingName: undefined
        },

        constructor: function(config) {
            this.mergeConfig(config);
            this.callParent(arguments);
        },

        getSetting: function() {
            return this.settingsParent.app.getSetting(this.settingName);
        },

        setRadioValue: function (cmp) {
            this.setRadioToCustomValue(cmp, this.getSetting());
        },

        setRadioToCustomValue: function (cmp, customValue) {
            var value = {};
            value[cmp.name] = customValue;
            cmp.setValue(value);
        }
    });
}());
(function () {
    var Ext = window.Ext4 || window.Ext;

    Ext.define("Rally.apps.charts.settings.PortfolioItemPicker", {
        extend: "Ext.form.FieldContainer",
        alias: "widget.chartportfolioitempicker",

        settingsParent: undefined,
        requestContext: undefined,

        requires: [
            'Deft.Deferred',
            'Rally.util.Test',
            'Rally.ui.EmptyTextFactory',
            'Rally.ui.dialog.ChooserDialog',
            'Rally.data.wsapi.Store'
        ],

        mixins: [
            'Ext.form.field.Field',
            'Rally.apps.charts.settings.SettingsChangeMixin'
        ],

        emptyText: '<p>No portfolio items match your search criteria.</p>',

        items: [
            {
                xtype: "label",
                text: "Portfolio Item",
                cls: "settingsLabel"
            },
            {
                xtype: "container",
                name: "portfolioItemPicker",
                layout: {
                    type: "hbox"
                },
                items: [
                    {

                        xtype: 'rallybutton',
                        text: 'Add',
                        itemId: 'portfolioItemButton',
                        cls: 'piButton primary small'
                    },
                    {
                        xtype: 'container',
                        cls: 'piDisplayField',
                        items: [
                            {
                                xtype: 'container',
                                itemId: 'portfolioItemDisplay',
                                value: "&nbsp;"
                            }
                        ]
                    }

                ]
            }
        ],

        initComponent: function () {
            this.callParent(arguments);
            this._addTestClass();
        },

        _addTestClass: function () {
            this.addCls(Rally.util.Test.toBrowserTestCssClass('buttonChooser'));
        },
        
        beforeRender: function () {
            this._configureButton();
            this._configurePicker();
        },

        _configureButton: function () {
            this.down('#portfolioItemButton').on('click', this._onButtonClick, this);
        },

        _configurePicker: function () {
            this._setValueFromSettings();
            this._setupRequestContext();
            this._loadPortfolioItems();
        },

        _setupRequestContext: function () {
            this.requestContext = {
                workspace: this.settingsParent.app.context.getWorkspaceRef(),
                project: null
            };
        },

        _setValueFromSettings: function () {
            var newSettingsValue = this.settingsParent.app.getSetting("portfolioItemPicker"),
                oldSettingsValue = this.settingsParent.app.getSetting("buttonchooser");

            if (this._isSettingValid(newSettingsValue)) {
                this.setValue(newSettingsValue);
            } else if (this._isSettingValid(oldSettingsValue)) {
                this.setValue(Ext.JSON.decode(oldSettingsValue).artifact._ref);
            } else {
                this.setValue("&nbsp;");
            }
        },

        _isSettingValid: function (value) {
            return value && value !== "undefined";
        },

        _loadPortfolioItems: function () {
            if (this._isSavedValueValid()) {
                this._createPortfolioItemStore();
            }
        },

        _createPortfolioItemStore: function () {
            if ( Ext.isEmpty(this.value) || this.value.length === 0 ) {
                return;
            }
            var filters = Rally.data.wsapi.Filter.or(
                Ext.Array.map(this.value,function(pi_ref){
                    return {
                        property: "ObjectID",
                        operator: "=",
                        value: Rally.util.Ref.getOidFromRef(pi_ref)
                    };
                })
            );
            
            Ext.create("Rally.data.wsapi.Store", {
                model: Ext.identityFn("Portfolio Item"),
                filters: filters,
                context: this.requestContext,
                autoLoad: true,
                listeners: {
                    load: this._onPortfolioItemsRetrieved,
                    scope: this
                }
            });
        },

        _isSavedValueValid: function () {
            return Ext.isArray(this.value) && this.value !== "undefined";
        },

        _onPortfolioItemsRetrieved: function (store,records) {
            var storeData = records;
            this._handleStoreResults(storeData);
        },

        _setDisplayValue: function () {
            var container = this.down('#portfolioItemDisplay');
            container.removeAll();
            container.add(this._getPortfolioItemDisplay());
        },

        _onButtonClick: function () {
            this._destroyChooser();

            this.dialog = Ext.create("Rally.ui.dialog.ArtifactChooserDialog", this._getChooserConfig());
            this.dialog.show();
        },

        _destroyChooser: function () {
            if (this.dialog) {
                this.dialog.destroy();
            }
        },

        _getPortfolioItemDisplay: function () {
            if ( Ext.isEmpty(this.portfolioItems) ) {
                return;
            }
            if ( ! Ext.isArray(this.portfolioItems) ) {
                this.portfolioItems = [this.portfolioItems];
            }
            
            return Ext.Array.map(this.portfolioItems, function(pi){
                return {
                    xtype:'button',
                    cls: 'project-button',
                    text: pi.FormattedID + " <span class='icon-delete'></span>",
                    listeners: {
                        scope: this, 
                        click: function() {
                            this._removeItem(pi);
                        }
                    }
                };
            },this);
        },

        _removeItem: function(record) {
            this.portfolioItems = Ext.Array.filter(this.portfolioItems, function(pi){
                return ( record.FormattedID != pi.FormattedID );
            });
            
            this.portfolioItemRefs = Ext.Array.map(this.portfolioItems, function(pi) { return pi._ref; });
            this.setValue(this.portfolioItemRefs);
            this.sendSettingsChange(this.portfolioItems);

            this._setDisplayValue();
        },
        
        _onPortfolioItemChosen: function (dialog,resultStore) {
            var items = Ext.Array.merge(resultStore, this.portfolioItems);
                        
            this._handleStoreResults(items);
            this._destroyChooser();
        },
        
        _filterUniquePIs: function(items) {
            var hash = {};
            Ext.Array.each(items, function(item) {
                var ref = item._ref || item.get('_ref');
                hash[ref] = item;
            });
            
            return Ext.Object.getValues(hash);
        },

        _handleStoreResults: function(store) {
            if (store) {
                if ( Ext.isArray(store) ) {
                    var pis = Ext.Array.map(store, function(pi) { 
                        if ( Ext.isFunction(pi.getData) ) {
                            return pi.getData();
                        }
                        return pi;
                    });
                    
                    this.portfolioItems = this._filterUniquePIs(pis);
                    
                    this.portfolioItemRefs = Ext.Array.map(this.portfolioItems, function(pi) {
                        return pi._ref;
                    });
                    
                    this._setDisplayValue();
                    this.setValue(this.portfolioItemRefs);
                    this.sendSettingsChange(this.portfolioItems);
                } else if (store.data) {
                    this.portfolioItem = store.data;
                    this._setDisplayValue();
                    this.setValue(this.portfolioItem._ref);
                    this.sendSettingsChange(this.portfolioItem);
                }
            }
        },

        _getChooserConfig: function () {
            return {
                artifactTypes: ['portfolioitem'],
                multiple: true,
                height: 350,
                title: 'Choose Portfolio Item(s) to Add',
                closeAction: 'destroy',
                selectionButtonText: 'Select',
                _isArtifactEditable: function(record) {
                    return true;
                },
                listeners: {
                    artifactChosen: this._onPortfolioItemChosen,
                    scope: this
                },
                storeConfig: {
                    project: null,
                    context: this.requestContext,
                    fetch: ['ObjectID','Project','WorkSpace','FormattedID','Name','ActualStartDate','PlannedStartDate','ActualEndDate','PlannedEndDate']
                },
                gridConfig: {
                    viewConfig: {
                        emptyText: Rally.ui.EmptyTextFactory.getEmptyTextFor(this.emptyText),
                        getRowClass: function(record) {
                            return Rally.util.Test.toBrowserTestCssClass('row', record.getId()) + '';
                        }
                    }
                }
            };
        },

        setValue: function (value) {
            
            if (value && value !== "undefined") {
                if ( Ext.isString(value) ) {
                    value = value.split(',');
                }
                this.value = value;
            }
            else {
                this.value = this.settingsParent.app.getSetting("portfolioItemPicker");
            }
        },

        getSubmitData: function () {
            var returnObject = {};

            if ( this.portfolioItemRefs && Ext.isArray(this.portfolioItemRefs) ) {
                this.setValue(this.portfolioItemRefs);
                returnObject.portfolioItemPicker = this.portfolioItemRefs;                
            } else if (this.portfolioItem) {

                this.setValue(this.portfolioItem._ref);
                returnObject.portfolioItemPicker = this.portfolioItem._ref;
            }
            else {
                returnObject.portfolioItemPicker = "";
            }

            return returnObject;
        }
    });
}());
(function () {
    var Ext = window.Ext4 || window.Ext;

    Ext.define("Rally.apps.charts.settings.DataTypePicker", {
        extend: "Rally.apps.charts.settings.RadioGroupSetting",
        alias: "widget.chartdatatypepicker",

        mixins: [
            "Ext.form.field.Field",
            "Rally.apps.charts.settings.SettingsChangeMixin"
        ],

        config: {
            settingName: "chartAggregationType"
        },

        settingsParent: undefined,

        initComponent: function () {
            this.callParent(arguments);
            this.add(this._addRadioGroup());
        },

        _addRadioGroup: function () {
            return {
                xtype: "radiogroup",
                name: this.settingName,
                columns: [160, 100],
                vertical: false,
                items: [
                    { boxLabel: "Story Plan Estimate", name: this.settingName, inputValue: "storypoints", checked: true },
                    { boxLabel: "Story Count", name: this.settingName, inputValue: "storycount" }
                ],
                listeners: {
                    beforerender: this.setRadioValue,
                    scope: this
                }
            };
        }
    });
}());
(function () {
    var Ext = window.Ext4 || window.Ext;

    Ext.define("Rally.apps.charts.settings.PortfolioItemDataTypePicker", {
        extend: "Rally.apps.charts.settings.DataTypePicker",
        alias: "widget.chartportfoliodatatypepicker",

        setRadioValue: function(cmp) {
            this.callParent(arguments);

            if(!this.getValue()) {
                this.setRadioToCustomValue(cmp, "storycount");
            }
        },

        _addRadioGroup: function () {
            return {
                xtype: "container",
                minWidth: 250,
                items: [
                    {
                        xtype: "label",
                        text: "Data Type",
                        cls: "settingsLabel",
                        style: {
                            display: "block",
                            minHeight: "20px"
                        }
                    },
                    {
                        xtype: "radiogroup",
                        name: this.settingName,
                        columns: [100, 150],
                        vertical: false,
                        items: [
                            { boxLabel: "Story Count", name: this.settingName, inputValue: "storycount" },
                            { boxLabel: "Story Plan Estimate", name: this.settingName, inputValue: "storypoints" }
                        ],
                        listeners: {
                            beforerender: this.setRadioValue,
                            scope: this
                        }
                    }
                ]
            };
        }
    });
}());
(function () {
    var Ext = window.Ext4 || window.Ext;

    Ext.define("Rally.apps.charts.settings.PortfolioDatePicker", {
        extend: "Ext.form.FieldContainer",
        alias: "widget.chartportfoliodatepicker",

        requires: [
            "Rally.ui.DateField"
        ],

        mixins: [
            'Ext.form.field.Field',
            'Rally.apps.charts.DateMixin',
            'Rally.apps.charts.settings.SettingsChangeMixin'
        ],

        layout: {
            type: "hbox"
        },

        items: [
            {
                xtype: "container",
                minWidth: 250,
                items: [
                    {
                        xtype: "label",
                        text: "Start Date",
                        cls: "settingsLabel"
                    },
                    {
                        xtype: "radiogroup",
                        name: "startdate",
                        itemId: "startdategroup",
                        columns: 1,
                        vertical: true,
                        items: [
                            {
                                name: "startdate",
                                itemId: "actualstartdate",
                                boxLabel: "Actual Start Date",
                                baseLabel: "Actual Start Date",
                                inputValue: "actualstartdate"
                            },
                            {
                                name: "startdate",
                                itemId: "plannedstartdate",
                                boxLabel: "Planned Start Date",
                                baseLabel: "Planned Start Date",
                                inputValue: "plannedstartdate"
                            },
                            {
                                xtype: "container",
                                layout: {
                                    type: "hbox"
                                },
                                items: [
                                    {
                                        xtype: "radiofield",
                                        name: "startdate",
                                        itemId: "startdatemanual",
                                        boxLabel: " ",
                                        inputValue: "selecteddate"
                                    },
                                    {
                                        xtype: "rallydatefield",
                                        name: "startdate",
                                        itemId: "startdatefield",
                                        inputValue: "selecteddate"
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            {
                xtype: "container",
                minWidth: 250,
                items: [
                    {
                        xtype: "label",
                        text: "End Date",
                        cls: "settingsLabel"
                    },
                    {
                        xtype: "radiogroup",
                        name: "enddate",
                        itemId: "enddategroup",
                        columns: 1,
                        vertical: true,
                        items: [
                            {
                                name: "enddate",
                                itemId: 'today',
                                boxLabel: "Today",
                                inputValue: "today"
                            },
                            {
                                name: "enddate",
                                itemId: "actualenddate",
                                boxLabel: "Actual End Date",
                                baseLabel: "Actual End Date",
                                inputValue: "actualenddate"
                            },
                            {
                                name: "enddate",
                                itemId: "plannedenddate",
                                boxLabel: "Planned End Date",
                                baseLabel: "Planned End Date",
                                inputValue: "plannedenddate"
                            },
                            {
                                xtype: "container",
                                layout: {
                                    type: "hbox"
                                },
                                items: [
                                    {
                                        xtype: "radiofield",
                                        name: "enddate",
                                        itemId: "enddatemanual",
                                        boxLabel: " ",
                                        inputValue: "selecteddate"
                                    },
                                    {
                                        xtype: "rallydatefield",
                                        name: "enddate",
                                        itemId: "enddatefield",
                                        inputValue: "selecteddate"
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }
        ],

        settingsParent: undefined,

        /**
         * @Override from SettingsChangeMixin
         * Updates child components when a new portfolio item is chosen.
         */
        receiveSettingsChange: function (artifact) {            
            if (artifact && !Ext.isArray(artifact)) {
                this._enableRadioGroups();
                this._updateRadioLabel(this.actualStartDate, artifact.ActualStartDate);
                this._updateRadioLabel(this.plannedStartDate, artifact.PlannedStartDate);
                this._updateRadioLabel(this.actualEndDate, artifact.ActualEndDate);
                this._updateRadioLabel(this.plannedEndDate, artifact.PlannedEndDate);
                this._setDefaultValues();            
            } else if ( Ext.isArray(artifact) && artifact.length > 0 ) {
                this._enableRadioGroups();
                var actual_start = this._getEarliestDate(artifact, 'ActualStartDate');
                var actual_end = this._getLatestDate(artifact, 'ActualEndDate');
                var planned_start = this._getEarliestDate(artifact, 'PlannedStartDate');
                var planned_end =  this._getLatestDate(artifact, 'PlannedEndDate');
                
                this._updateRadioLabel(this.actualStartDate, actual_start);
                this._updateRadioLabel(this.plannedStartDate, planned_start);
                this._updateRadioLabel(this.actualEndDate, actual_end);
                this._updateRadioLabel(this.plannedEndDate, planned_end);
                this._setDefaultValues();
            
            }
        },

        initComponent: function () {
            this.callParent(arguments);
            this._saveComponentReferences();
            this._setupChangeHandlers();
        },

        beforeRender: function () {
            this._disableRadioGroups();
            this._loadSavedSettingsIntoComponent(this.startDateGroup);
            this._loadSavedSettingsIntoComponent(this.endDateGroup);
        },

        _getEarliestDate: function(artifacts, field_name){
            var chosen_date = null;
            Ext.Array.each(artifacts, function(artifact) {
                var artifact_date = artifact[field_name];
                if ( artifact_date ) {
                    if ( !chosen_date || artifact_date < chosen_date ) {
                        chosen_date = artifact_date;
                    }
                }
            });
            
            return chosen_date;
        },

        _getLatestDate: function(artifacts, field_name){
            var chosen_date = null;
            Ext.Array.each(artifacts, function(artifact) {
                var artifact_date = artifact[field_name];
                if ( artifact_date ) {
                    if ( !chosen_date || artifact_date > chosen_date ) {
                        chosen_date = artifact_date;
                    }
                }
            });
            
            return chosen_date;
        },
        
        selectCustomDateRadioOption: function (cmp) {
            var value = {};
            value[cmp.name] = "selecteddate";
            this._getDateGroup(cmp.name).setValue(value);
        },

        _setupChangeHandlers: function () {
            this.startDatePicker.on('change', this.selectCustomDateRadioOption, this);
            this.endDatePicker.on('change', this.selectCustomDateRadioOption, this);
        },

        _saveComponentReferences: function () {
            this.actualStartDate = this.down("#actualstartdate");
            this.actualEndDate = this.down("#actualenddate");
            this.plannedStartDate = this.down("#plannedstartdate");
            this.plannedEndDate = this.down("#plannedenddate");
            this.startDateGroup = this.down("#startdategroup");
            this.endDateGroup = this.down("#enddategroup");
            this.startDatePicker = this.down("#startdatefield");
            this.endDatePicker = this.down("#enddatefield");
        },

        _disableRadioGroups: function() {
            this.startDateGroup.disable();
            this.endDateGroup.disable();
        },

        _enableRadioGroups: function () {
            this.startDateGroup.enable();
            this.endDateGroup.enable();
        },

        _loadSavedSettingsIntoComponent: function (component) {
            var settingValue = this._getSettingValue(component.name);
            if ( Ext.isArray(settingValue) ) { settingValue = settingValue.join(','); }
            
            var settingParts = settingValue.split(","),
                selection = settingParts[0],
                date = settingParts[1];

            if (date) {
                this._setSavedDate(component, date);
            }

            this._selectRadio(component, selection);
        },

        _setDefaultValues: function () {
            if (this._dateGroupHasNoSelection(this.startDateGroup) && !this.actualStartDate.disabled) {
                this._selectRadio(this.startDateGroup, "actualstartdate");
            }

            if (this._dateGroupHasNoSelection(this.endDateGroup)) {
                if (!this.actualEndDate.disabled) {
                    this._selectRadio(this.endDateGroup, "actualenddate");
                }
                else {
                    this._selectRadio(this.endDateGroup, "today");
                }
            }
        },

        _dateGroupHasNoSelection: function (dateGroupCmp) {
            return Ext.Object.getSize(dateGroupCmp.getValue()) === 0;
        },

        _selectRadio: function (component, selection) {
            if (selection.length > 0) {
                var componentValue = {};
                componentValue[component.name] = selection;
                component.setValue(componentValue);
            }
        },

        _getSettingValue: function (setting) {
            return this.settingsParent.app.getSetting(setting) || "";
        },

        _getCustomDateForGroup: function (groupName) {
            return ({
                startdate: this.startDatePicker,
                enddate: this.endDatePicker
            })[groupName];
        },

        _getDateGroup: function (groupName) {
            return ({
                startdate: this.startDateGroup,
                enddate: this.endDateGroup
            })[groupName];
        },

        _setSavedDate: function (component, dateString) {
            if (component && dateString && dateString.length > 0) {
                var datePicker = this._getCustomDateForGroup(component.name),
                    date = this.dateStringToObject(dateString);

                datePicker.setValue(date);
            }
        },

        _updateRadioLabel: function (radioComponent, date) {
            var newLabelValue = radioComponent.baseLabel,
                formattedDate = this.dateToStringDisplay(date);

            if (formattedDate) {
                radioComponent.enable();
                newLabelValue += " (" + formattedDate + ")";
            }
            else {
                radioComponent.disable();
                if (this._isActualDateRadioField(radioComponent)) {
                    newLabelValue += ": Not Available";
                }
                else {
                    newLabelValue += ": Not Set";
                }
            }

            radioComponent.boxLabelEl.setHTML(newLabelValue);
        },

        _isActualDateRadioField: function (radioComponent) {
            return radioComponent.getId().indexOf("actual") > -1;
        }
    });
}());
(function () {
    var Ext = window.Ext4 || window.Ext;

    Ext.define("Rally.apps.charts.rpm.ChartSettings", {

        requires: [
            "Rally.apps.charts.settings.PortfolioDatePicker",
            "Rally.apps.charts.settings.PortfolioItemDataTypePicker",
            "Rally.apps.charts.settings.PortfolioItemPicker"
        ],

        mixins: [
            "Rally.apps.charts.settings.SettingsChangeMixin"
        ],

        config: {
            app: undefined
        },

        constructor: function (config) {
            this.mergeConfig(config);
        },

        getSettingsConfiguration: function () {
            var self = this;

            var componentJoiner = function () {
                this.settingsParent = this.settingsParent || self;
                self.addChildComponent(this);
            };

            return [
                this._buildComponent("chartportfolioitempicker", componentJoiner),
                this._buildComponent("chartportfoliodatepicker", componentJoiner),
                this._buildComponent("chartportfoliodatatypepicker", componentJoiner)
            ];
        },

        _buildComponent: function (type, componentJoiner) {
            return {
                xtype: type,
                cls: "paddedSettingCmp",
                listeners: {
                    added: componentJoiner
                }
            };
        },

        sendSettingsChange: function (artifact, caller) {
            for (var i = 0; i < this.childComponents.length; i++) {
                var child = this.childComponents[i];
                if (child !== caller) {
                    child.receiveSettingsChange(artifact);
                }
            }
        },

        addChildComponent: function (component) {
            this.childComponents = this.childComponents || [];
            this.childComponents.push(component);
        }
    });
}());
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350,
    
    informationalConfig: null,
    
    items: [{xtype:'container', itemId:'information' }],
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/var BUILDER  = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
       
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
   
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    var stored_checksum = me._generateChecksum(text);
                    if ( CHECKSUM !== stored_checksum ) {
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    _addToContainer: function(container){
        var config = Ext.apply({
            xtype:'container',
            height: 200,
            overflowY: true
        }, this.informationalConfig);
        
        container.add(config);
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if ( !Ext.isEmpty( this.informationalConfig ) ) {
            var container = this.down('#information');
            this._addToContainer(container);
            
        }
        
        if (! app.isExternal() ) {
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            dock: 'bottom',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml,
                doc: 'top'
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            dock:'bottom',
            html:"This app was created by the CA AC Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            var build_html = Ext.String.format("Built on: {0} <br/>Built by: {1}",
                APP_BUILD_DATE,
                BUILDER);
                
            if ( STORY ) {
                build_html = build_html + "<br/>Source story: " + STORY;
            }
                
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html: build_html
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

const MY_PROJECT_ID = 161729654772;

Ext.define('Rally.example.CFDCalculator', {
    extend: 'Rally.data.lookback.calculator.TimeSeriesCalculator',
    config: {
        // stateFieldName: 'ScheduleState',
        // stateFieldValues: ['Defined', 'In-Progress', 'Completed', 'Accepted'],

    },

    constructor: function (config) {
        this.initConfig(config);
        this.callParent(arguments);
    },

    getMetrics: function () {
        return [
            {
                field: "TaskRemainingTotal",
                as: "To Do",
                f: 'sum',
                display: 'column'
            },
            {
                field: "TaskActualTotal",
                as: "Actuals",
                f: 'sum',
                display: 'column'
            }
        ];
        /*
        return _.map(this.getStateFieldValues(), function (stateFieldValue) {
            return {
                as: stateFieldValue,
                groupByField: this.getStateFieldName(),
                allowedValues: [stateFieldValue],
                f: 'groupByCount',
                display: 'column'
            };
        }, this);
        */
    }
});

Ext.define("PTBUD", {
    extend: 'Rally.app.App',

    requires: [
        'Rally.example.CFDCalculator'
    ],

    listeners: {

    },

    config: {
        defaultSettings: {
            portfolioItemPicker: ''
        }
    },

    getSettingsFields: function () {
        return this.chartSettings && this.chartSettings.getSettingsConfiguration();
    },

    launch: function () {
        this.add({
            xtype: 'rallychart',
            storeType: 'Rally.data.lookback.SnapshotStore',
            storeConfig: this._getStoreConfig(),
            calculatorType: 'Rally.example.CFDCalculator',
            calculatorConfig: {
                // stateFieldName: 'ScheduleState',
                // stateFieldValues: ['Defined', 'In-Progress', 'Completed', 'Accepted'],
                granularity: 'hour'
            },
            chartConfig: this._getChartConfig()
        });
        console.log(this.getSettings());
        this._setupChartSettings();
    },

    _setupChartSettings: function () {
        this.chartSettings = Ext.create("Rally.apps.charts.rpm.ChartSettings", {
            app: this
        });
    },

    /**
     * Generate the store config to retrieve all snapshots for stories and defects in the current project scope
     * within the last 30 days
     */
    _getStoreConfig: function () {
        console.log(this._getPortfolioItems());
        return {
            find: {
                _TypeHierarchy: {'$in': ['HierarchicalRequirement']},
                Children: null,
                _ItemHierarchy: {'$in' : this._getPortfolioItems()},
                //_ValidFrom: { '$gt': Rally.util.DateTime.toIsoString(Rally.util.DateTime.add(new Date(), 'day', -30)) }
                _ValidFrom: {'$lt': Rally.util.DateTime.toIsoString(new Date())}
            },
            fetch: ['Name', 'TaskEstimateTotal', 'TaskActualTotal', 'TaskRemainingTotal'],
            sort: {
                _ValidFrom: 1
            },
            context: this.getContext().getDataContext(),
            limit: Infinity,
            listeners: {
                load: function (store, records) {
                    console.log(records);
                }
            }
        };
    },

    _getPortfolioItems: function() {
        var refs = this.getSetting('portfolioItemPicker').split(',');
        return refs.map( function(ref) {
           return Rally.util.Ref.getOidFromRef(ref);
        });
    },

    /**
     * Generate a valid Highcharts configuration object to specify the chart
     */
    _getChartConfig: function () {
        return {
            chart: {
                zoomType: 'xy'
            },
            title: {
                text: 'Project Cumulative Flow'
            },
            xAxis: {
                tickmarkPlacement: 'on',
                tickInterval: 20,
                title: {
                    text: 'Date'
                }
            },
            yAxis: [
                {
                    title: {
                        text: 'Count'
                    }
                }
            ],
            plotOptions: {
                series: {
                    marker: {
                        enabled: false
                    }
                },
                area: {
                    stacking: 'normal'
                }
            }
        };
    }
});

/*
Ext.define("PTBUD", {
    extend: 'Rally.app.App',

    launch: function() {
        var snapshotStore = Ext.create('Rally.data.lookback.SnapshotStore', {
            fetch: ['Name', 'Project', 'Actuals'],
            autoLoad: true,
            filters: [
                {
                    property: '_TypeHierarchy', 
                    value: 'Task'
                },
                {
                    property: 'Actuals',
                    operator: '>',
                    value: 0 
                },
                {
                    property: 'Project',
                    operator: '=',
                    value: PROJECT_ID
                },
            ],
            listeners: {
                load: function(store, records) {
                    console.log(records);
                }
            }
        });
    }
});
*/

            
               Rally.launchApp('PTBUD', {
                   name: 'Portfolio Task Burn Up/Down'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>